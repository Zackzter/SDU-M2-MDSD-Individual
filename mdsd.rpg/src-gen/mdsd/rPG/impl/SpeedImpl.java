/**
 * generated by Xtext 2.21.0
 */
package mdsd.rPG.impl;

import mdsd.rPG.Attribute;
import mdsd.rPG.RPGPackage;
import mdsd.rPG.Speed;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Speed</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mdsd.rPG.impl.SpeedImpl#getSpeedValue <em>Speed Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpeedImpl extends DeclarationImpl implements Speed
{
  /**
   * The cached value of the '{@link #getSpeedValue() <em>Speed Value</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpeedValue()
   * @generated
   * @ordered
   */
  protected Attribute speedValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpeedImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RPGPackage.Literals.SPEED;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute getSpeedValue()
  {
    if (speedValue != null && speedValue.eIsProxy())
    {
      InternalEObject oldSpeedValue = (InternalEObject)speedValue;
      speedValue = (Attribute)eResolveProxy(oldSpeedValue);
      if (speedValue != oldSpeedValue)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RPGPackage.SPEED__SPEED_VALUE, oldSpeedValue, speedValue));
      }
    }
    return speedValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetSpeedValue()
  {
    return speedValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpeedValue(Attribute newSpeedValue)
  {
    Attribute oldSpeedValue = speedValue;
    speedValue = newSpeedValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RPGPackage.SPEED__SPEED_VALUE, oldSpeedValue, speedValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RPGPackage.SPEED__SPEED_VALUE:
        if (resolve) return getSpeedValue();
        return basicGetSpeedValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RPGPackage.SPEED__SPEED_VALUE:
        setSpeedValue((Attribute)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.SPEED__SPEED_VALUE:
        setSpeedValue((Attribute)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RPGPackage.SPEED__SPEED_VALUE:
        return speedValue != null;
    }
    return super.eIsSet(featureID);
  }

} //SpeedImpl
