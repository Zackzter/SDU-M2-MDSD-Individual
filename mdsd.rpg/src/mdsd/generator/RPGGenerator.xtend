/*
 * generated by Xtext 2.21.0
 */
package mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mdsd.rPG.SystemRPG
import mdsd.rPG.Entity
import mdsd.rPG.Moves
import mdsd.rPG.Locations
import mdsd.rPG.Death
import mdsd.rPG.Require
import mdsd.rPG.Or
import mdsd.rPG.And
import mdsd.rPG.Add
import mdsd.rPG.Sub
import mdsd.rPG.Mult
import mdsd.rPG.Div
import mdsd.rPG.Comparator
import mdsd.rPG.Eq
import mdsd.rPG.Smaller
import mdsd.rPG.SmallerEq
import mdsd.rPG.NEq
import mdsd.rPG.Bigger
import mdsd.rPG.BiggerEq
import mdsd.rPG.IntNum
import mdsd.rPG.NameAttribute
import mdsd.rPG.FloatNum
import mdsd.rPG.Attributes
import mdsd.rPG.Entities
import mdsd.rPG.Declaration
import mdsd.rPG.Relations
import mdsd.rPG.Teams
import mdsd.rPG.NumberComparing
import mdsd.rPG.Team
import mdsd.rPG.Effects
import mdsd.rPG.Buff
import mdsd.rPG.MoveE
import mdsd.rPG.Speed

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RPGGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val result = resource.allContents.filter(SystemRPG).next
		
		main(result, fsa)
		
	}
	
	def main(SystemRPG systemRPG, IFileSystemAccess2 fsa){	
		val classFileName = systemRPG.getName() 
		for (Declaration declaration : systemRPG.getDeclarations()){
			switch(declaration){
				Locations:
					generateLocations(fsa, declaration)
				Relations:
					generateTypes(fsa, declaration)
				Moves:
					generateMoves(fsa, declaration)
				Entities:
					generateEntities(fsa, declaration)
				Teams:
					generateTeams(fsa, declaration)
				Attributes:
					generateAttributes(fsa, declaration)
				Death:
					fsa.generateFile("DeathChecker.java", declaration.generateDeathChecker)
				Effects:
					generateEffectFiles(fsa, declaration)
				Speed:
					fsa.generateFile("Speed.java", declaration.generateSpeed)
				default:
					System.out.println("This is not a supported instance of Declaration")
			}

		}
		fsa.generateFile(classFileName + ".java", classFileName.generateGame)
		fsa.generateFile("Runner.java", classFileName.generateRunner)
	}
	
	def CharSequence generateSpeed(Speed speed){
		'''
		import java.util.*;
		
		public class Speed implements Comparator<Entity> {
		
		    private Map<Entity, Number> entitySpeed;
		    private Type type = Type.getInstance();
		    private List<String> strongTypes;
		
		    public Speed(Map<Entity, Number> entitySpeed){
		        this.entitySpeed = entitySpeed;
		    }
		
		    public Speed(){}
		
		    public«IF speed.checkSpeedValue» int «ELSE» float «ENDIF»getSpeed(Entity entity, String terrain){
				HashMap<String, Number> eData = new HashMap<>();
				for(AttributeData aData : entity.getAttributes()){
					eData.put(aData.getAttributeName(), aData.getNumber());
				}
				try{
					return checkType(entity, eData.get("«speed.speedValue.name»")«speed.numValue», terrain);
				} catch(NullPointerException e){
					System.out.println("The target seems to have no speed");
					return 0;
				}
		    }
		    
		    public«IF speed.checkSpeedValue» int «ELSE» float «ENDIF»checkType(Entity entity, int speed, String terrain){
		        strongTypes = type.getTypeRelations().get(terrain).getStrongAgainst();
		        if(entity.getType().equals(terrain)) return speed *2;
		        else if(strongTypes.contains(entity.getType())) return speed / 2;
		        return speed;	
		    } 
		    
		
		    @Override
		    public int compare(Entity o1, Entity o2) {
		        if (entitySpeed.get(o1)«speed.numValue» >= entitySpeed.get(o2)«speed.numValue») {
		            return -1;
		        } else {
		            return 1;
		        } // returning 0 would merge keys
		    }
		
		    public Map<Entity, Number> getEntitySpeed(){
		        return this.entitySpeed;
		    }
		}
		
		'''
	}
	
	def boolean checkSpeedValue(Speed speed){
		if(speed.speedValue instanceof IntNum || speed.speedValue.AVal.LTypes == "Integer"){
			return true
		}
		return false
	}
	
	def CharSequence numValue(Speed speed){
		'''
		«IF speed.checkSpeedValue».intValue()«ELSE».floatValue()«ENDIF»
		'''
	}
	
	def CharSequence generateRunner(String name){
		'''
		import java.util.*;
		
		public class Runner {
		    public static void main(String[] args) {
		    	«name» «name.toLowerCase» = new «name»();
		    	«name.toLowerCase».run();
		    }
		}
		'''
	}
	
	def CharSequence generateDeathChecker(Death death){
		'''
		import java.util.*;
		public class DeathChecker {
			public boolean check(Entity entity){
				HashMap<String, Number> eData = new HashMap<>();
				for(AttributeData aData : entity.getAttributes()){
					eData.put(aData.getAttributeName(), aData.getNumber());
				}
				try{
					return («death.req.new_re»);
				} catch(NullPointerException e){
					System.out.println("The target seems to be invincible.");
					return false;
				}
			}
		}
		'''
	}
	
	def CharSequence generateGame(String classFileName){
		'''
		import java.util.*;
		
		public class «classFileName»{
			private Type type;
		    private List<Entity> entities;
		    private Team team;
		    private Move move;
		    private MoveInit moveInit;
		    private EntityInit entityInit;
		    private TeamInit teamInit;
		    private TypeRelationsInit typeRelationsInit;
		    private LocationsInit locationsInit;
		    private Location location;
		    private DeathChecker deathChecker;
			private Random random;
			private Speed speed;
		    
		    private boolean gameFinished;
		    private boolean won = false;
		    private boolean lost = false;
		    private Scanner s;
			private Entity targetEntity;
			private Map<String, Entity> playerNameID;
			private Map<String, Entity> enemyNameID;
			private List<Entity> enemyTeam;
			private Map<Entity, Map<Entity, String>> moveQueue;
			private Map<Entity, String> targetMap;
			private List<String> targetList;
			private Map<Entity, Number> entitySpeed;
			private Map<Entity, Number> treeSpeed;
			private Speed sortedSpeed;
			private String terrainType;
		    
		    
		    public «classFileName»(){
		    	entities = new ArrayList<>();
		    	type = Type.getInstance();
		      	team = new Team();    	
		    	move = Move.getInstance();
		    	location = Location.getInstance();
				deathChecker = new DeathChecker();
				speed = new Speed();
		    	moveInit = new MoveInit();
				entityInit = new EntityInit();
		    	teamInit = new TeamInit();
		    	locationsInit = new LocationsInit();
		        typeRelationsInit = new TypeRelationsInit();
		        s = new Scanner(System.in);
				random = new Random();
				
				entitySpeed = new HashMap<>();
				playerNameID = new HashMap<>();
				enemyNameID = new HashMap<>();
				moveQueue = new HashMap<>();
				sortedSpeed = new Speed(entitySpeed);
				treeSpeed = new TreeMap<>(sortedSpeed);
		   	}
		   	
		   	public void run(){
		   		initialize();
		   		gameLoop();
		   	}
		   	
		   	private void initialize(){
		   		moveInit.addMoves(move);
		   		entityInit.createEntities(entities);
		   		teamInit.createTeams(team, entities);
		   		typeRelationsInit.createRelations(type);
		   		locationsInit.addLocations(location);
			   }
			   
			private void reffereceMap(List<Entity> entities, Map<String, Entity> entityMap){
				int entitiesLeft = team.getTeamSize();
				if(entities.size() < team.getTeamSize()) entitiesLeft = entities.size();
		
				for (int i = 0; i < entitiesLeft; i++) {
					Entity currentEntity = entities.remove(0);
					System.out.println("name: " + currentEntity);
					if(entityMap.get(currentEntity.getName()) == null){
						entityMap.put(currentEntity.getName(), currentEntity);
					}
					else{
						for(i=2; i < entitiesLeft + 2; i++){
							String extendedName = currentEntity.getName() + i;
							if(entityMap.get(extendedName) == null){
								entityMap.put(extendedName, currentEntity);
								break;
							}
						}
					}
				}
			}
		   	
		   	private void gameLoop(){
				reffereceMap(team.getPlayerTeam(), playerNameID);
		
		   		
				while (!gameFinished) {
					if(won){
						gameFinished = true;
						System.out.println("You Won!");
					}else if(lost){
						gameFinished = true;
						System.out.println("You Lost.");
					}else{
						// Get current location to fight at
						for(LocationData locationD : location.getLocations()){
							System.out.println(location.getLocations().remove(0));
							String currentLocation = locationD.getLocationName();
							String enemyTeamName = locationD.getTeam();
							String terrain = locationD.getTerrain().getName();
							terrainType = locationD.getTerrain().getType();
							enemyTeam = team.getTeamByName(enemyTeamName);
							System.out.println("Current Location: " + currentLocation + ", fighting against: " + enemyTeamName + ".\nTerrain is: " + terrain);
							processGame();
							if((location.getLocations().isEmpty()) && !lost){
								won = true;
								break;
							   }
						}
					}
				}
		   	}
		   	
		   	private void processGame(){
		   		while(enemyTeam.size() > 0 && !lost){
		   			//Entity enemyEntity = enemyTeam.remove(0);
					//currentEnemyTeam.add(enemyEntity);
		   			reffereceMap(enemyTeam, enemyNameID);
		   			fight();
		   		}
		
		   	}
		   	
			private void executeBuffMove(Move move, String moveName, Entity target){
				if(!move.getMove(moveName).getBuffEffects().isEmpty()){
					for(EffectBuff buffEffect: move.getMove(moveName).getBuffEffects()){
							buffEffect.doEffect(move, moveName, target);
					}
				}
			}
		
			private void executeMove(Move move, String moveName, Entity target, Entity user){
				if(!move.getMove(moveName).getMoveEffects().isEmpty()){
					for(EffectMove moveEffect: move.getMove(moveName).getMoveEffects()){
						moveEffect.doEffect(move, moveName, target, user);
					}
				}
			}
		
		
					   	
		   		
		   	private void fight(){
				boolean fighting = true;
				Entity currentEntity;
		   		while(fighting){
					System.out.println("You are against " + enemyNameID.keySet() + " choose your move");
					for(String entityName : playerNameID.keySet()){
						currentEntity = playerNameID.get(entityName);
						//entitySpeed.put(currentEntity, speed.getSpeed(currentEntity));
						entitySpeed.put(currentEntity, speed.getSpeed(currentEntity, terrainType));
						//treeSpeed.put(currentEntity, speed.getSpeed(currentEntity));
						List<String> moves = currentEntity.getMoveNameList();
						System.out.println(moves);
					
						//List<String> moves = playerEntity.getMoveNameList();
						
						boolean pickMove = true;
						while (pickMove){  
							String moveName = s.nextLine();
							
							// Will check that the user picks a move which exists
							if(moves.contains(moveName)){
								boolean pickTeam = true;
								//List<Entity> chosenTeam = null;
								while(pickTeam){
									System.out.println("What team do you want to target: enemy or self");
									String targetTeam = s.nextLine();
									boolean pickTarget = true;
									if(targetTeam.equals("enemy")){
										System.out.println("The enemy targets are: " + enemyNameID.keySet());
										//chosenTeam = currentEnemyTeam;
										pickTeam = false;
										
										while(pickTarget){
											String target = s.nextLine();
											if(enemyNameID.keySet().contains(target)){
											//if(currentEnemyTeam.toString().contains(target)){
												for(String targetEnemy : enemyNameID.keySet()){
													System.out.println("name " + targetEnemy);
													if(targetEnemy.equals(target)){ 
														targetEntity = enemyNameID.get(target);
														break;
													}
		
												}
												//currentEnemyTeam.forEach(targetEnemy ->{ if(targetEnemy.getName().equals(target)){targetEntity = targetEnemy;}});
												pickTarget = false;
											}
											else{
												System.out.println("Not a possible target.");
											}
										}
									}
									else if(targetTeam.equals("self")){
										System.out.println("Your team is: " + playerNameID.keySet());
										//chosenTeam = battleEntities;
										pickTeam = false;
										
										while(pickTarget){
											String target = s.nextLine();
											if(playerNameID.keySet().contains(target)){
												for(String targetSelf : playerNameID.keySet()){
													if(targetSelf.equals(target)) targetEntity = playerNameID.get(target);
													break;
												}
											//if(battleEntities.toString().contains(target)){
												// battleEntities.forEach(targetSelf ->{ if(targetSelf.getName().equals(target)){
												// 	targetEntity = targetSelf;}});
												pickTarget = false;
											}
											else{
												System.out.println("Not a possible target.");
											}
										}
									}
									else{
										System.out.println("Not a team.");
									}
								}
								targetMap = new HashMap<>();
								targetMap.put(targetEntity, moveName);
								moveQueue.put(currentEntity, targetMap);
								// System.out.println("You used "+ moveName + "\n");
								
								// executeBuffMove(move, moveName, playerEntity);
								// executeMove(move, moveName, targetEntity, playerEntity); TODO::: USE MOVE SOMEWHERE ELSE
								
								pickMove = !pickMove;
							}else{
								System.out.println("That's not a possible move!");
							}
						}
					}
		
					for(String enemyName : enemyNameID.keySet()){
						currentEntity = enemyNameID.get(enemyName);
						entitySpeed.put(currentEntity, speed.getSpeed(currentEntity, terrainType));
						//treeSpeed.put(currentEntity, speed.getSpeed(currentEntity));
						int choosenMove = random.nextInt(currentEntity.getMoveNameList().size());
						String moveName = currentEntity.getMoveNameList().get(choosenMove);
						targetList = new ArrayList<>(playerNameID.keySet());
						targetEntity = playerNameID.get(targetList.get(random.nextInt(targetList.size())));
						targetMap = new HashMap<>();
						targetMap.put(targetEntity, moveName);
						moveQueue.put(currentEntity, targetMap);
					}
					// if(deathChecker.check(targetEntity)){
					// 	System.out.println(targetEntity.getName() + " is dead!");
					// 	targetEntity.setEntityState(EntityState.DEAD);
					// 	currentEnemyTeam.remove(targetEntity);
					// 	enemyNameID.remove(targetEntity.getName());
					// 	return;
					// }else{
					// 	//System.out.println("Enemy Turn...");
		
					// 	int choosenMove = random.nextInt(enemyEntity.getMoveNameList().size());
					// 	System.out.println(enemyEntity.getName() + " used " + enemyEntity.getMoveNameList().get(choosenMove) + "\n");
						
					// 	executeBuffMove(move, enemyEntity.getMoveNameList().get(choosenMove), enemyEntity);
					// 	executeMove(move, enemyEntity.getMoveNameList().get(choosenMove), playerEntity, enemyEntity);
						
					// 	if(deathChecker.check(playerEntity)){
					// 		System.out.println("Your " + playerEntity.getName() + " is dead");
					// 		playerEntity.setEntityState(EntityState.DEAD);
					// 		playerNameID.remove(playerEntity.getName()); //TODO:: FIX
					// 		battleEntities.remove(playerEntity);
							
					// 		// Will add the next player entity to the fight, if there are no more, it will go to game over
					// 		if(!team.getPlayerTeam().isEmpty()){
					// 			// playerEntity = team.getPlayerTeam().remove(0);
					// 			// battleEntities.add(playerEntity);
					// 			reffereceMap(team.getPlayerTeam(), playerNameID);
					// 		}else{
					// 			lost = true;
					// 			return;
					// 		}
					// 	}
					// }
					System.out.println(moveQueue);
					System.out.println(entitySpeed);
					System.out.println("------------");
					treeSpeed.putAll(entitySpeed);
					System.out.println(treeSpeed);
		
					for(Entity fightingEntity : treeSpeed.keySet()){
						String moveName = "";
						for(Entity target : moveQueue.get(fightingEntity).keySet()){
							targetEntity = target;
							moveName = moveQueue.get(fightingEntity).get(target);
						}
						if(playerNameID.containsValue(targetEntity)){
							useMove(playerNameID, fightingEntity, targetEntity, moveName);
						}
						else if(enemyNameID.containsValue(targetEntity)){
							useMove(enemyNameID, fightingEntity, targetEntity, moveName);
						}
						else{
							System.out.println("You missed...");
						}
					}
					moveQueue.clear();
					entitySpeed.clear();
					treeSpeed.clear();
					for(String entityName : playerNameID.keySet()){
						if(playerNameID.get(entityName).getEntityState().equals(EntityState.DEAD)){
							playerNameID.remove(entityName);
							if(!team.getPlayerTeam().isEmpty())	reffereceMap(team.getPlayerTeam(), playerNameID);
							else if(playerNameID.isEmpty()){
								lost = true;
								return;
							}
						}
					}
					for(String entityName : enemyNameID.keySet()){
						if(enemyNameID.get(entityName).getEntityState().equals(EntityState.DEAD)){
							enemyNameID.remove(entityName);
							if(!enemyTeam.isEmpty()) reffereceMap(enemyTeam, enemyNameID);
							else if(enemyNameID.isEmpty()) return;
						}
					}
		   		}
			   }
			   
		
			private void useMove(Map<String, Entity> nameID, Entity fightingEntity, Entity targetEntity, String moveName){
					System.out.println(fightingEntity.getName() + " uses " + moveName);
					executeBuffMove(move, moveName, fightingEntity);
					executeMove(move, moveName, targetEntity, fightingEntity);
					if(deathChecker.check(targetEntity)){
						targetEntity.setEntityState(EntityState.DEAD);
						System.out.println(targetEntity.getName() + " is dead!");
						treeSpeed.remove(targetEntity);
						//nameID.values().remove(targetEntity);
					}
			}
		
		}
		'''
	}
	
	def generateAttributes(IFileSystemAccess2 fsa, Attributes attributes){
        fsa.generateFile("AttributeEnum.java", attributes.generateAttributeEnum)
        fsa.generateFile("AttributeData.java", generateAttributeData)
	}
	
	def CharSequence generateAttribute(){
		'''
		import java.util.*;
		
		public class Attribute {
		    private List<AttributeData> attributes = new ArrayList<>();
		
		    private static Attribute attribute;
		
		    private Attribute() {
		
		    }
		
		    public static Attribute getInstance() {
		        if (attribute == null) {
		            attribute = new Attribute();
		        }
		        return attribute;
		    }
		
		    public void addAttribute(AttributeData attribute) {
		        attributes.add(attribute);
		    }
		    
		    public List<AttributeData> getAttributes() {
		        return attributes;
		    }
		}
		'''
	}

	def generateAttributeChangeEvent(){
		'''
		public class AttributeChangeEvent{
		  private AttributeData previousState;
		  private AttributeData targetState;
		
		  public AttributeChangeEvent(AttributeData previousState, AttributeData targetState){
		    this.previousState = previousState;
		    this.targetState = targetState;
		  }
		
		  public AttributeData getTargetState(){
		    return this.targetState;
		  }
		
		  public AttributeData getPreviousState(){
		    return this.previousState;
		  }
		
		}
		'''
	}
	
	def CharSequence generateAttributeData(){
		'''
		import java.util.*;
		public class AttributeData {
		
		    private Number number;
		    private String attributeName;
		
		    public AttributeData() {
		    }
		
		    public AttributeData(String attributeName, Number number) {
		        this.number = number;
		        this.attributeName = attributeName;
		    }
		
		    public Number getNumber() {
		        return this.number;
		    }
		
		    public void setNumber(Number number){
		        this.number = number;
		    }
		
		    public String getAttributeName() {
		        return this.attributeName;
		    }
		
		    public void setAttributeName(String attributeName) {
		        this.attributeName = attributeName;
		    }
			
			@Override
			public String toString() {
				return this.number.toString();
			}
		}
		'''
	}
	
	def generateAttributeEnum(Attributes attributes){
        '''
        public enum AttributeEnum{
        «FOR attribute: attributes.attribute »
            «attribute.name»,
        «ENDFOR»
        }
        '''
    }
    
	def generateEffectFiles(IFileSystemAccess2 fsa, Effects effects){
      	var buffClasses = ""
      	var moveEClasses = ""
    	for (effect : effects.effect){
    		switch effect{
    			Buff:  {
    					buffClasses += effect.generateBuffEffectFile
    					}
    			MoveE: {
    					moveEClasses += effect.generateMoveEffectFile
    					}
    		}
		}
		fsa.addEveryEffect(buffClasses, moveEClasses)
	}
	
	def addEveryEffect(IFileSystemAccess2 fsa, String buffClasses, String moveEClasses){
		fsa.generateFile("EffectBuff.java", buffClasses.generateEffectBuff)
		fsa.generateFile("EffectMove.java", moveEClasses.generateEffectMove)
	}
		
	
	def CharSequence generateEffectMove(String moveEClasses){
			    	'''
    	import java.util.*;
    	public abstract class EffectMove {
    	
    	    protected Map<String, Number> eData;
    	    
«««    	    protected float typeFactor = 1;
    	    
    	    public abstract boolean effectMove(Move move, String name, Entity enemy);
    	
    	    public abstract Map<String, Number> changeMove(Move move, String name, Entity enemy);
    	
    	    public abstract void doEffect(Move move, String name, Entity enemy, Entity player);
    	    
«««    	    public abstract int checkStrongType(String moveType, String entityType);
    	    
    	    «moveEClasses»    	
    	}
    	'''
		}
		
	def CharSequence generateEffectBuff(String buffClasses){
			    	'''
    	import java.util.*;
    	public abstract class EffectBuff {
    		
    		protected Map<String, Number> eData;
    		
    	    public abstract boolean effectBuff(Move move, String name, Entity player);
    	
    	    public abstract Map<String, Number> changeBuff(Move move, String name, Entity player);
    	
    	    public abstract void doEffect(Move move, String name, Entity player);  
    	    
    	    «buffClasses»  	
    	}
    	'''
		}		
    
    def CharSequence generateBuffEffectFile(Buff buff){
    	'''
			public static class «buff.name» extends EffectBuff{
								
				@Override
				public boolean effectBuff(Move move, String name, Entity player){
					«IF buff.rule.or !== null»
					eData = new HashMap<>();
					for(AttributeData playerData : player.getAttributes()){
						eData.put(playerData.getAttributeName(), playerData.getNumber());
					}			
					for(AttributeData aData : move.getMove(name).getMoveAttributes()){
						eData.put(aData.getAttributeName(), aData.getNumber());				
					}					
					return «buff.rule.or.new_logic»;
					«ELSE»
					return true;					
					«ENDIF»
				}
			
				@Override
				public Map<String, Number> changeBuff(Move move, String name, Entity player){
					eData = new HashMap<>();
					for(AttributeData playerData : player.getAttributes()){
							eData.put(playerData.getAttributeName(), playerData.getNumber());
						}			
					for(AttributeData aData : move.getMove(name).getMoveAttributes()){
							eData.put(aData.getAttributeName(), aData.getNumber());				
						}
						return eData;
				}
			
			
				@Override		
				public void doEffect(Move move, String name, Entity player){
					if(effectBuff(move, name, player)){
						eData = changeBuff(move, name, player);
						for(AttributeData aData : player.getAttributes()){
							
							«FOR change : buff.rule.target»
								if(aData.getAttributeName() == "«change.target.name»"){
									aData.setNumber(«change.sum.new_exp»);
									System.out.println(player.getName() + "'(s) "  + aData.getAttributeName() + " is now: " + aData.getNumber());									
									break;
								}
								
							«ENDFOR»							
								
							}
						for(AttributeData aData : move.getMove(name).getMoveAttributes()){
							«FOR change : buff.rule.target»
							if(aData.getAttributeName() == "«change.target.name»"){
								aData.setNumber(«change.sum.new_exp»);
								System.out.println(player.getName() + "'(s) "  + aData.getAttributeName() + " is now: " + aData.getNumber());
								
							}
							«ENDFOR»										

						}

					}						
				}
			}
    	'''
    }
    
	def CharSequence generateMoveEffectFile(MoveE moveE){
    	'''
			public static class «moveE.name» extends EffectMove{
								
				@Override
				public boolean effectMove(Move move, String name, Entity enemy){
					«IF moveE.rule.or !== null»
					eData = new HashMap<>();
					for(AttributeData enemyData : enemy.getAttributes()){
						eData.put(enemyData.getAttributeName(), enemyData.getNumber());
					}			
					for(AttributeData aData : move.getMove(name).getMoveAttributes()){
						eData.put(aData.getAttributeName(), aData.getNumber());				
					}					
					return «moveE.rule.or.new_logic»;
					«ELSE»
					return true;					
					«ENDIF»
				}
				
				@Override
				public Map<String, Number> changeMove(Move move, String name, Entity enemy){
					eData = new HashMap<>();
					for(AttributeData enemyData : enemy.getAttributes()){
							eData.put(enemyData.getAttributeName(), enemyData.getNumber());
						}			
					for(AttributeData aData : move.getMove(name).getMoveAttributes()){
							eData.put(aData.getAttributeName(), aData.getNumber());				
						}
						return eData;
				}
			
			
				@Override		
				public void doEffect(Move move, String name, Entity enemy, Entity player){
					if(effectMove(move, name, player)){
						«IF !moveE.rule.change.target.isEmpty»
						eData = changeMove(move, name, enemy);
						for(AttributeData aData : enemy.getAttributes()){
							
							«FOR change : moveE.rule.change.target»
							if(aData.getAttributeName() == "«change.target.name»"){
								eData = changeMove(move, name, enemy);
								
								aData.setNumber(«change.sum.new_exp»);
								System.out.println(enemy.getName() + "'(s) "  + aData.getAttributeName() + " is now: " + aData.getNumber());

							}
								
							«ENDFOR»

						}
						«ENDIF»
						«IF !moveE.rule.change.selfT.isEmpty()»
						eData = changeMove(move, name, player);
						for(AttributeData aData : player.getAttributes()){
							«FOR change : moveE.rule.change.selfT»
							if(aData.getAttributeName() == "«change.target.name»"){
								aData.setNumber(«change.sum.new_exp»);
								System.out.println(player.getName() + "'(s) "  + aData.getAttributeName() + " is now: " + aData.getNumber());

							}							
							«ENDFOR»
						}
						«ENDIF»
					}			
				}
			}
    	'''
    }	

	def generateEntities(IFileSystemAccess2 fsa, Entities entities){
		fsa.generateFile("Entity.java", generateEntity)
		fsa.generateFile("EntityEnum.java", entities.generateEntityEnum)
		fsa.generateFile("EntityState.java", generateEntityState)
		fsa.generateFile("EntityInit.java", entities.generateEntityInit)
	}
	
	def CharSequence generateEntity(){
		'''
		import java.util.*;
		public class Entity{
		    private String name;
		    private String type;
		    private EntityState state;
		    private List<AttributeData> attribute;
		    private List<MoveData> moves;
		
		    public Entity(){
		      attribute = new ArrayList<>();
		      moves = new ArrayList<>();
		    }
		
		    public Entity(Entity e){
		      this();
		      this.name = e.getName();
		      this.type = e.getType();
		      this.state = e.getEntityState();
		      if(!e.getAttributes().isEmpty())
		        this.attribute.addAll(e.getAttributes());
		      if(!e.getMoveData().isEmpty())
		        this.moves.addAll(e.getMoveData());
		    }
		
		    public String getName(){
		      return this.name;
		    }
		    public void setName(String name){
		      this.name = name;
		    }
		    public String getType(){
		      return this.type;
		    }
		    public void setType(String type){
		      this.type = type;
		    }
		    public List<AttributeData> getAttributes(){
		      return attribute;
		    }
		
		    public EntityState getEntityState(){
		      return state;
		    }
		
		    public void setEntityState(EntityState state){
		      this.state = state;
		    }
		
		    public void addAttribute(AttributeData attribute){
		      this.attribute.add(attribute);
		    }
		
		    public List<MoveData> getMoveData(){
		      return moves;
		    }
		
		    public List<String> getMoveNameList(){
		      List<String> moveNames = new ArrayList<>();
		      for (MoveData moveData : getMoveData()) {
		          moveNames.add(moveData.getMoveName());
		      }
		      return moveNames;
		    }
		    
		    public void addMoveData(MoveData moveData){
		      moves.add(moveData);
		    }
		    
		    @Override
		    public String toString() {
		      return this.name.toString();
		    }
		    
		}
		'''
	}
	
	def CharSequence generateEntityEnum(Entities entities){
		var entityEnum = ""
		var i = 1
		for(entity : entities.entity){
			entityEnum += entity.name
			if(i < entities.entity.size){
				entityEnum += ", "
				i++
			} else {
				entityEnum += ";"
			}
		}
		'''
		enum EntityEnum{
			«entityEnum»
		}
		'''
	}
	
	def CharSequence generateEntityState(){
		'''
		public enum EntityState {
		    DEAD, ALIVE
		}
		'''
	}
	
	def CharSequence generateEntityInit(Entities entities){	
		'''
		import java.util.*;
		
		public class EntityInit{
			public void createEntities(List<Entity> entities){
				«FOR entity : entities.entity»
				Entity «entity.name.toLowerCase» = new Entity();
				«entity.name.toLowerCase».setName("«entity.name»");
				«entity.name.toLowerCase».setType("«entity.EType.type.name»");
				«entity.name.toLowerCase».setEntityState(EntityState.ALIVE);
				«FOR move : entity.EMoves.move»
				«entity.name.toLowerCase».addMoveData(Move.getInstance().getMove("«move.name»"));
				«ENDFOR»
				«FOR att : entity.att»
				«entity.name.toLowerCase».addAttribute(new AttributeData("«att.attribute.name»", «getNumberValue(att.av.an)»));
				«ENDFOR»
				entities.add(«entity.name.toLowerCase»);
				«ENDFOR»
				
			}
		}
		
		'''
	}
	
	def CharSequence new_re(Require req){
		req.log.new_logic
	}
	
	def generateComp(Comparator op) {
		switch op { Eq: '==' Smaller: '<' Bigger: '>' SmallerEq: '<=' BiggerEq: '>=' NEq: '!=' }
	}

	def dispatch CharSequence new_logic(Or x){
		'''(«x.left.new_logic»||«x.right.new_logic»)'''
	}
	def dispatch CharSequence new_logic(And x){
		'''(«x.left.new_logic»&&«x.right.new_logic»)'''
	}
	def dispatch CharSequence new_logic(NumberComparing x){
		'''(«x.left.new_exp»«x.comp.generateComp»«x.right.new_exp»)'''
	}
	def dispatch CharSequence new_exp(Add x){
		'''(«x.left.new_exp»+«x.right.new_exp»)'''
	}
	def dispatch CharSequence new_exp(Sub x){
		'''(«x.left.new_exp»-«x.right.new_exp»)'''
	}
	def dispatch CharSequence new_exp(Mult x){
		'''(«x.left.new_exp»*«x.right.new_exp»)'''
	}
	def dispatch CharSequence new_exp(Div x){
		'''(«x.left.new_exp»/«x.right.new_exp»)'''
	}
	def dispatch CharSequence new_exp(IntNum x){
		Integer.toString(x.value)
	}
	def dispatch CharSequence new_exp(FloatNum x){
		Integer.toString(x.i) + '.' + Integer.toString(x.decimal)
	}
	def dispatch CharSequence new_exp(NameAttribute x){
		//if (x.attribute instanceof NormalAttribute){
			if(x.attribute.AVal.LTypes !== null && x.attribute.AVal.LTypes.equals("Integer")){
				"eData.get(" + '"' +x.attribute.name + '"' + ").intValue()"
			}else if(x.attribute.AVal.LTypes !== null && x.attribute.AVal.LTypes.equals("Float")){ 
				"eData.get(" + '"' +x.attribute.name + '"' + ").floatValue()"
			}else if(x.attribute.AVal.an !== null && x.attribute.AVal.an instanceof IntNum){
				"eData.get(" + '"' +x.attribute.name + '"' + ").intValue()"
			}else if(x.attribute.AVal.an !== null && x.attribute.AVal.an instanceof FloatNum){
				"eData.get(" + '"' +x.attribute.name + '"' + ").floatValue()"
			} else {
				"Something went wrong" 
			}
	//	}
//		else if(x.attribute instanceof AttributeRelation){
//			if(x.attribute.AVal.LTypes !== null && x.attribute.AVal.LTypes.equals("Integer")){
//				"(eData.get(" + '"' +x.attribute.name + '"' + ").intValue()*typeFactor)"
//			}else if(x.attribute.AVal.LTypes !== null && x.attribute.AVal.LTypes.equals("Float")){ 
//				"(eData.get(" + '"' +x.attribute.name + '"' + ").floatValue()*typeFactor)"
//			}else if(x.attribute.AVal.an !== null && x.attribute.AVal.an instanceof IntNum){
//				"(eData.get(" + '"' +x.attribute.name + '"' + ").intValue()*typeFactor)"
//			}else if(x.attribute.AVal.an !== null && x.attribute.AVal.an instanceof FloatNum){
//				"(eData.get(" + '"' +x.attribute.name + '"' + ").floatValue()*typeFactor)"
//			} else {
//				"Something went wrong" 
//			}			
//		}
	}
	
	def dispatch Number getNumberValue(IntNum x){
		x.value
	}
	def dispatch Number getNumberValue(FloatNum x){
		val floatstring = x.i + "." + x.decimal
		Float.valueOf(floatstring)
	}
	
	def generateLocations(IFileSystemAccess2 fsa, Locations locations){
		fsa.generateFile("Location.java", generateLocation)
		fsa.generateFile("LocationData.java", generateLocationData)
		fsa.generateFile("LocationsInit.java", locations.generateLocationInit)
	}
	
	def CharSequence generateLocation(){
		
		'''
		import java.util.*;
		
		public class Location {
		    private List<LocationData> locations;
		
		    private static Location location;    
		
		    private Location(){
		        locations = new ArrayList<>();
		    }
		
		    public static Location getInstance(){
		        if(location == null){
		            location = new Location();
		        }
		        return location;
		    }
		
		    public List<LocationData> getLocations(){
		        return this.locations;
		    }
		
		
		    public void addLocation(LocationData location){
		        locations.add(location);
		    }
		}
		'''
	}
	
	def CharSequence generateLocationData(){
		'''
		public class LocationData {
		    private Terrain terrain;
		    private String locationName;
		    private String team;
		
		    public class Terrain{
		        private String name;
		        private String type;
		
		        public Terrain(String name, String type){
		            this.name = name;
		            this.type = type;
		        }
		
		        public String getName(){
		            return this.name;
		        }
		
		        public String getType(){
		            return this.type;
		        }
		
		        public void setName(String name){
		            this.name = name;
		        }
		
		        public void setType(String type){
		            this.type= type;
		        }
		
		    }
		
		    public LocationData(){}
		
		    public LocationData(Terrain terrain, String locationName, String team){
		        this.locationName = locationName;
		        this.team = team;
		        this.terrain = terrain;
		    }
		
		    public Terrain getTerrain() {
		        return this.terrain;
		    }
		
		    public void setTerrain(Terrain terrain) {
		        this.terrain = terrain;
		    }
		
		    public String getLocationName() {
		        return this.locationName;
		    }
		
		    public void setLocationName(String locationName) {
		        this.locationName = locationName;
		    }
		
		    public String getTeam() {
		        return this.team;
		    }
		
		    public void setTeam(String team) {
		        this.team = team;
		    }
		}		
		
		'''
	}
	
	def CharSequence generateLocationInit(Locations locations){
		'''
		import java.util.*;
		
		public class LocationsInit{
			public void addLocations(Location location){
				LocationData locationData;
				«FOR location : locations.loc»
				locationData = new LocationData();
				locationData.setLocationName("«location.name»");
				locationData.setTeam("«location.team.name»");
				locationData.setTerrain(locationData.new Terrain("«location.terrain.name»", "«location.terrain.EType.type.name»"));
				location.addLocation(locationData);
				«ENDFOR»
			}
		}
		'''
	}
	
	def generateMoves(IFileSystemAccess2 fsa, Moves moves){
		fsa.generateFile("Move.java", generateMove)
		fsa.generateFile("MoveEnum.java", moves.generateMoveEnum)
		fsa.generateFile("MoveInit.java", moves.generateMoveInit)
		fsa.generateFile("MoveData.java", generateMoveData)
	}
	
	def CharSequence generateMove(){
		'''
		import java.util.*;
				
		public class Move{			
		
			private static Move move;
			private List<MoveData> moves = new ArrayList<>();
			
			private Move(){}
		
			public static Move getInstance(){
				if (move == null){
					move = new Move();
				}
				return move;
			}
		
			public void addMove(MoveData move){
				moves.add(move);
			}
		
			public MoveData getMove(String move){
				MoveData mD = null;
		
				for (MoveData moveData : moves) {
					if(moveData.getMoveName().equals(move)){
						mD = moveData;
					}
				}
				return mD;
			}
		
			public List<MoveData> getMoves(){
				return moves;
			}
		
		}
			
		'''
		
	}
	
	def CharSequence generateMoveData(){
		'''
		import java.util.*;
		
		public class MoveData{
		
		    private String moveName;
			private String type;
		    private List<AttributeData> moveAttributes;
		    private List<EffectMove> moveEffects;
		    private List<EffectBuff> buffEffects;
		
		    public MoveData(){
		        this.moveAttributes = new ArrayList<>();
				this.moveEffects = new ArrayList<>();
				this.buffEffects = new ArrayList<>();
		    }
		
		    public MoveData(String moveName, String type, List<AttributeData> moveAttributes, List<EffectMove> moveEffects, List<EffectBuff> buffEffects) {
		        this.moveName = moveName;
		        this.type = type;
		        this.moveAttributes = moveAttributes;
				this.moveEffects = moveEffects;
				this.buffEffects = buffEffects;
		    }
		
		    public String getMoveName(){
		        return this.moveName;
		    }
		
		    public void setMoveName(String moveName) {
		        this.moveName = moveName;
		    }
		
		    public String getType() {
		        return this.type;
		    }
		
		    public void setType(String type) {
		        this.type = type;
		    }
		
		    public List<AttributeData> getMoveAttributes() {
		        return this.moveAttributes;
		    }
		
		    public void setMoveAttributes(List<AttributeData> moveAttributes) {
		        this.moveAttributes = moveAttributes;
		    }
		
		    public void addAttribute(AttributeData attribute){
		        moveAttributes.add(attribute);
		    }
			
			public List<EffectBuff> getBuffEffects(){
				return this.buffEffects;
			}
			
			public List<EffectMove> getMoveEffects(){
				return this.moveEffects;
			}
			
			public void addMoveEffect(EffectMove moveEffect){
				this.moveEffects.add(moveEffect);
			}
			
			public void addBuffEffect(EffectBuff buffEffect){
				this.buffEffects.add(buffEffect);
			}
			
		
		    @Override
		    public boolean equals(Object o) {
		        if (o == this)
		            return true;
		        if (!(o instanceof MoveData)) {
		            return false;
		        }
		        MoveData moveData = (MoveData) o;
		        return Objects.equals(moveName, moveData.moveName) && Objects.equals(type, moveData.type) && Objects.equals(moveAttributes, moveData.moveAttributes);
		    }
		
		    @Override
		    public int hashCode() {
		        return Objects.hash(moveName, type, moveAttributes, moveEffects, buffEffects);
		    }
		
		    @Override
		    public String toString() {
		        return getMoveName();
		    }
		
		}
		'''
	}

	def CharSequence generateMoveEnum(Moves moves){
		var moveEnums = ""
		var i = 1
		for(move : moves.move){
			var name = move.name
			var type = move.getEType().type.name
			moveEnums += name
			moveEnums += "(" + '"' + type + '"' + ')'
			if(i < moves.move.size){
				moveEnums += ", "
				i++
			} else {
				moveEnums += ";"
			}
		}
		
		'''
		enum MoveEnum{
		    «moveEnums»
		    private String type;
		
		    private MoveEnum(String type){
		        this.type = type;
		    }
		
		    public String getType(){
		        return this.type;
		    }
		}
		'''
	}
	
	def CharSequence generateMoveInit(Moves moves){
		'''
		import java.util.*;
		
		public class MoveInit{
			public void addMoves(Move moves){ //private Move moves = Move.getInstance()
				MoveData tempMoveData;
				«FOR move : moves.move»
				tempMoveData = new MoveData();
				tempMoveData.setMoveName("«move.name»");
				tempMoveData.setType("«move.EType.type.name»");
				«FOR att : move.att»
				tempMoveData.addAttribute(new AttributeData("«att.attribute.name»", «getNumberValue(att.av.an)»));
				«ENDFOR»
				«FOR moveEffect : move.MEffect»
				«IF moveEffect !== null»
				tempMoveData.addMoveEffect(new EffectMove.«moveEffect.moveEName.name»());
				«ENDIF»
				«ENDFOR»
				«FOR buffEffect : move.BEffect»
				«IF buffEffect !== null»
				tempMoveData.addBuffEffect(new EffectBuff.«buffEffect.buffEName.name»());
				«ENDIF»
				«ENDFOR»			
				moves.addMove(tempMoveData);
				«ENDFOR»
			}
		}
		'''
	}
	
	def generateTeams(IFileSystemAccess2 fsa, Teams teams){
		fsa.generateFile("Team.java", teams.generateTeam)
		fsa.generateFile("TeamInit.java", teams.generateTeamInit)
	}
	
	def String addTeamMemberString(Team team){
		var createTeamString = "team.addTeamMember(" + '"' + team.name + '"' + ", "
		var i = 1
		for(Entity e : team.members.entity){
			createTeamString += "findEntityByName(" + '"'+ e.name + '"' + ", entities" + ")"
			if(team.members.entity.size() > i){
				i++
				createTeamString += ", "
			} else {
				createTeamString += ");"
			}
		}
		createTeamString
	}
	
	def CharSequence generateTeam(Teams teams){
		'''
		import java.util.*;
		
		public class Team {
		    private Map<String, List<Entity>> teams;
		    private List<String> teamNames;
		    private final int teamSize = «teams.size.value»;
		
		    public Team() {
		        teams = new HashMap<>();
		        teamNames = new ArrayList<>(); 
		    }
		
		    public List<Entity> getTeamByName(String name) {
		        if (!teams.containsKey(name)) {
		            return null;
		        }
		        return teams.get(name);
		    }
		
		    public void addTeamMember(String team, Entity... entity) {
		        if (!teams.containsKey(team)) {
		            teams.put(team, entityAdder(entity));
		            teamNames.add(team);
		        } else {
		            teams.get(team).addAll(entityAdder(entity));
		        }
		    }
		
		    public List<Entity> entityAdder(Entity... entity) {
		        List<Entity> eList = new ArrayList<>();
		        for (Entity entity2 : entity) {
		            Entity tempEntity = new Entity(entity2);
		            eList.add(tempEntity);
		        }
		        return eList;
		    }
		
		    public Map<String, List<Entity>> getTeams(){
		        return teams;
		    }
		
		    public List<Entity> getPlayerTeam(){
		        return teams.get(teamNames.get(0));
		    }
		    
		    public int getTeamSize(){
		    	return this.teamSize;
		    }
		
		    public boolean checkPlayerEntities(){
		        int playerTeamSize = getPlayerTeam().size();
		        int deadEntities = 0;
		        for (Entity entity : getPlayerTeam()) {
		            if(entity.getEntityState() == EntityState.DEAD) break;
		            deadEntities++;
		            if(deadEntities == playerTeamSize) return true;
		        }
		        return false;
		    }
		
		    public int playerEntitiesAlive(){
		        int alive = 0;
		        for (Entity entity : getPlayerTeam()) {
		            if(entity.getEntityState() != EntityState.DEAD) alive++;
		        }
		        return alive;
		    }
		}
		'''
	}
	
	def CharSequence generateTeamInit(Teams teams){
		'''
		import java.util.*;
		
		public class TeamInit{
			public void createTeams(Team team, List<Entity> entities){
				«FOR team : teams.team»
				«addTeamMemberString(team)»
				«ENDFOR»
			}
			
			private Entity findEntityByName(String name, List<Entity> entities){
				for(Entity e : entities){
					if(e.getName().equals(name)){
						return e;
					}
				}
				return null;
			}
		}
		
		
		
		
		'''
	}
	
	def generateTypes(IFileSystemAccess2 fsa, Relations relations){
		fsa.generateFile("Type.java", generateType)
		fsa.generateFile("TypeEnum.java", relations.generateTypeEnum)
		fsa.generateFile("TypeRelation.java", generateTypeRelation)
		fsa.generateFile("TypeRelationsInit.java", relations.generateTypeInit)
	}
	
	def CharSequence generateTypeRelation(){
		'''
		import java.util.ArrayList;
				
				public class TypeRelation {
				
				    private ArrayList<String> weakAgainst;
				    private ArrayList<String> strongAgainst;
				
				    public TypeRelation(){
				        weakAgainst = new ArrayList<>();
				        strongAgainst = new ArrayList<>();
				    }
				
				    public void addStrongAgainst(String strong){
				        strongAgainst.add(strong);
				    }
				
				    public void addWeakAgainst(String weak){
				        weakAgainst.add(weak);
				    }
				
				    public ArrayList<String> getWeakAgainst(){
				        return weakAgainst;
				    }
				
				    public ArrayList<String> getStrongAgainst(){
				        return strongAgainst;
				    }
				
				}
		'''
	}
	
	def CharSequence generateTypeInit(Relations relations){
		
		'''
		import java.util.*;
				
		public class TypeRelationsInit{
			public void createRelations(Type type){
				TypeRelation tr;
				String currentType;
				«FOR t : relations.type»
				tr = new TypeRelation();
				currentType = "«t.name»";
				«IF t.TExpression !== null»
				tr.addStrongAgainst("«t.TExpression.strong.name»");
				«FOR better : t.TExpression.strong2»
				tr.addStrongAgainst("«better.name»");
				«ENDFOR»
				tr.addWeakAgainst("«t.TExpression.weak.name»");
				«FOR worse : t.TExpression.weak2»
				tr.addWeakAgainst("«worse.name»");
				«ENDFOR»
				«ENDIF»
				type.addTypeRelation(currentType, tr);
				«ENDFOR»
			}
		}
		'''
	}
	
	def CharSequence generateType(){
		'''
		import java.util.*;
				
		public class Type{
				
			private List<String> types = new ArrayList<>();
			private HashMap<String, TypeRelation> typeRelations = new HashMap<>();
		
			private static Type type;
					
			private Type(){}
		
			public static Type getInstance(){
				if(type == null){
					type = new Type();
				}
				return type;
			}
							
			public void addType(String type){
				types.add(type);
			}
		
			public List<String> getTypes(){
				return types;
			}
		
			public void addTypeRelation(String typeString, TypeRelation tr){
				typeRelations.put(typeString, tr);
			}
		
			public HashMap<String, TypeRelation> getTypeRelations(){
				return typeRelations;
			}
		}
		'''
	}

	def generateTypeEnum(Relations relations){
        '''
        public enum TypeEnum{
        «FOR type: relations.type »
            «type.name»,
        «ENDFOR»
        }
        '''
    }
	
}
